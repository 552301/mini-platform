server.port=8085
spring.application.name=auth-service

spring.profiles.active=@profileActive@
eureka.client.service-url.defaultZone=@eureka-service-url@
eureka.instance.instance-id=${spring.cloud.client.ip-address}:${server.port}

### Apollo 配置 ###
app.id=${spring.application.name}
apollo.bootstrap.enabled=true
apollo.bootstrap.namespaces=application
apollo.meta=@apollo-meta-service-url@

spring.redis.host=@redis-host@
spring.redis.port=@redis-port@
spring.redis.password=hiling

# 数据库连接字符串
spring.datasource.url=jdbc:mysql://@mysql-url@/mini_api_dev?useUnicode=true&characterEncoding=utf8&serverTimezone=Asia/Shanghai
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource

# OAuth数据库地址配置
spring.datasource.oauth.jdbc-url=jdbc:mysql://@mysql-url@/mini_oauth_dev?useUnicode=true&characterEncoding=utf8&serverTimezone=Asia/Shanghai&useSSL=false
spring.datasource.oauth.username=root
spring.datasource.oauth.password=root
spring.datasource.oauth.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.oauth.idleTimeout=60000
spring.datasource.oauth.maxLifetime=120000
spring.datasource.oauth.maximumPoolSize=4
spring.datasource.oauth.minimumIdle=1

# Client数据库地址配置
spring.datasource.client.jdbc-url=jdbc:mysql://@mysql-url@/mini_oauth_dev?useUnicode=true&characterEncoding=utf8&serverTimezone=Asia/Shanghai&useSSL=false
spring.datasource.client.username=root
spring.datasource.client.password=root
spring.datasource.client.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.client.idleTimeout=60000
spring.datasource.client.maxLifetime=120000
spring.datasource.client.maximumPoolSize=2
spring.datasource.client.minimumIdle=1

# User数据库地址配置
spring.datasource.user.jdbc-url=jdbc:mysql://@mysql-url@/mini_api_dev?useUnicode=true&characterEncoding=utf8&serverTimezone=Asia/Shanghai&useSSL=false
spring.datasource.user.username=root
spring.datasource.user.password=root
spring.datasource.user.driver-class-name=com.mysql.jdbc.Driver
# 连接只读数据库时配置为true， 保证安全
spring.datasource.user.readOnly=true
#等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 缺省:30秒
spring.datasource.user.connectionTimeout=30000
# 一个连接idle状态的最大时长（毫秒），超时则被释放（retired），缺省:10分钟
spring.datasource.user.idleTimeout=60000
# 一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省:30分钟，建议设置比数据库超时时长少30秒，
# 参考MySQL wait_timeout参数（show variables like '%timeout%';）
spring.datasource.user.maxLifetime=120000
# 连接池中允许的最大连接数。缺省值：10；推荐的公式：((core_count * 2) + effective_spindle_count)
spring.datasource.user.maximumPoolSize=4
# 池中维护的最小空闲连接数
spring.datasource.user.minimumIdle=1

#https://blog.csdn.net/MyHerux/article/details/80730690


###OAuth配置###

##Password模式配置##
# 当Password时，clientSecret是否必须验证
oauth.password.client-secret.required=false

##AccessToken##
#accessToken过期时间(秒)默认2小时(每次生成accessToken时重新生成jwtToken，因此，jwtToken过期时间与accessToken过期时间相同)
oauth.access-token.expiration=3600

#每执行一次清除过期Token后sleep的时间（秒），默认1秒
oauth.access-token.remove-expired.loop-wait=10
#每次移除过期数据时，保留最近几秒的数据，默认5秒,，避免当客户端同时发起获取token和刷新token的请求时，先执行了刷新token，导致获取token失败。
oauth.access-token.remove-expired.reserve-time=5
#每次移除的最多客户&用户数，避免单次处理数据过多导致数据库性能压力，默认1000条
oauth.access-token.remove-expired.max-remove-count=1000

##RefreshToken##
#refreshToken过期设置，单位为秒
#场景示例：
# 1、滑动过期=0，绝对过期=0，表示永不过期。
# 2、滑动过期=1天，绝对过期=0天，表示1天内没有调用后过期。
# 3、滑动过期=0，绝对过期=1天，表示不管是否有调用，总是1天后过期。
# 4、滑动过期=1天，绝对过期=7天，表示1天内没有调用后过期，最多缓存7天。
#refreshToken滑动过期时间(秒) 默认1天
oauth.refresh-token.sliding-expiration=7200
#refreshToken绝对过期时间(秒) 默认7天
oauth.refresh-token.absolute-expiration=86400

oauth.refresh-token.remove-expired.loop-wait=10
oauth.refresh-token.remove-expired.reserve-time=5
oauth.refresh-token.remove-expired.max-remove-count=1000

# 当OAuth的grant_type=password时，验证username、password的方式，支持：url和sql；
# 当为url时，使用外部服务验证用户名密码的正确性，需要配置url地址；
# 当为sql时，直接使用配置的sql脚本验证，需同时配置sql脚本和数据库链接字符串
oauth.user.login.type=sql

# 验证用户名密码的服务地址，参数支持{username}和{password}
oauth.user.login.url=http://127.0.0.1:8088/user?username={username}&password={password}

# 验证用户名密码的sql脚本
# 支持的列为：userId, username, password, scope，salt（密码加盐，如果为固定值，可以如 'mini' as salt，BCrypt算法时不需要）
# 如果DB中的列表名不一致时，请使用as重命名，如：id as userId
# 查询参数为：#{username}，但Properties中“#”号为特殊字符，程序中会自动给“{”前添加“#”号，因此只需要输入{username}即可
oauth.user.login.sql=select id as userId, username, password, salt from user where username={username}

# 密码加密方式：支持none(明文)，md5、bcrypt、pbkdf2
oauth.user.password.hash.type=none

# 允许操作client模块的scope，即：当某client的scope包含oauth-client时，可操作client模块
oauth.client.allow.scope=oauth-client