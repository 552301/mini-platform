server.port=8030
spring.application.name=oauth-service

# 建议将需要修改的配置写到对应环境的Profile文件中，格式：application-{profile}.properties，如：application-dev.properties、application-prd.properties
# 在启动时使用spring.profiles.active={profile}参数指定profile即可，如：java -jar discovery.jar --spring.profiles.active=dev
# 或者在IDE中配置启动参数：如IDEA的Run/Debug Configurations中配置Environment/VM options参数为：-Dspring.profiles.active=dev
# Spring Boot会先加载默认的配置文件，然后使用指定的profile中的配置去覆盖默认配置
# SpringBoot常用配置读取优先级：命令行参数、Java系统参数、jar外部配置(常用于生产环境敏感配置，使用spring.config.location指定)、jar内部profile配置，jar内部默认配置
# 示例：当要使用不同的端口启动多个实例时，可通过命令行参数如-Dserver.port=8089启动。
# spring.profiles.active=dev

### Apollo 配置 ###
app.id=${spring.application.name}
apollo.bootstrap.enabled=true
apollo.bootstrap.namespaces=application
apollo.meta=http://localhost:8761

eureka.client.service-url.default-zone=http://discovery1:8761/eureka/,http://discovery2:8762/eureka/,http://discovery3:8763/eureka/

# OAuth数据库地址配置
spring.datasource.oauth.jdbc-url=jdbc:mysql://127.0.0.1:3306/mini_oauth_dev?useUnicode=true&characterEncoding=utf8&useSSL=false
spring.datasource.oauth.username=root
spring.datasource.oauth.password=root
spring.datasource.oauth.driver-class-name=com.mysql.jdbc.Driver

# Client数据库地址配置
spring.datasource.client.jdbc-url=jdbc:mysql://127.0.0.1:3306/mini_oauth_dev?useUnicode=true&characterEncoding=utf8&useSSL=false
spring.datasource.client.username=root
spring.datasource.client.password=root
spring.datasource.client.driver-class-name=com.mysql.jdbc.Driver

# User数据库地址配置
spring.datasource.user.jdbc-url=jdbc:mysql://127.0.0.1:3306/mini_api_dev?useUnicode=true&characterEncoding=utf8&useSSL=false
spring.datasource.user.username=root
spring.datasource.user.password=root
spring.datasource.user.driver-class-name=com.mysql.jdbc.Driver

### Redis 配置 ###
spring.redis.host=127.0.0.1
spring.redis.port=6379
spring.redis.password=root
spring.redis.database=0

# spring.redis.timeout=60s
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.lettuce.pool.max-active=16
# 连接池中的最大空闲连接
spring.redis.lettuce.pool.max-idle=8
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.lettuce.pool.max-wait=30s
# 连接池中的最小空闲连接
spring.redis.lettuce.pool.min-idle=4
spring.redis.lettuce.shutdown-timeout=10s

# 扫描 mapper.xml
mybatis-plus.mapper-locations=classpath:/mapper/*Mapper.xml

###OAuth配置###
##AccessToken##
#accessToken过期时间(秒)默认2小时(每次生成accessToken时重新生成jwtToken，因此，jwtToken过期时间与accessToken过期时间相同)
oauth.access-token.expiration=3600

#每执行一次清除过期Token后sleep的时间（秒），默认1秒
oauth.access-token.remove-expired.loop-wait=10
#每次移除过期数据时，保留最近几秒的数据，默认5秒,，避免当客户端同时发起获取token和刷新token的请求时，先执行了刷新token，导致获取token失败。
oauth.access-token.remove-expired.reserve-time=5
#每次移除的最多客户&用户数，避免单次处理数据过多导致数据库性能压力，默认1000条
oauth.access-token.remove-expired.max-remove-count=1000

##RefreshToken##
#refreshToken过期设置，单位为秒
#场景示例：
# 1、滑动过期=0，绝对过期=0，表示永不过期。
# 2、滑动过期=1天，绝对过期=0天，表示1天内没有调用后过期。
# 3、滑动过期=0，绝对过期=1天，表示不管是否有调用，总是1天后过期。
# 4、滑动过期=1天，绝对过期=7天，表示1天内没有调用后过期，最多缓存7天。
#refreshToken滑动过期时间(秒) 默认1天
oauth.refresh-token.sliding-expiration=7200
#refreshToken绝对过期时间(秒) 默认7天
oauth.refresh-token.absolute-expiration=86400

oauth.refresh-token.remove-expired.loop-wait=10
oauth.refresh-token.remove-expired.reserve-time=5
oauth.refresh-token.remove-expired.max-remove-count=1000

# 当OAuth的grant_type=password时，验证username、password的方式，支持：url和sql；
# 当为url时，使用外部服务验证用户名密码的正确性，需要配置url地址；
# 当为sql时，直接使用配置的sql脚本验证，需同时配置sql脚本和数据库链接字符串
user.login.type=sql

# 验证用户名密码的服务地址，参数支持{username}和{password}
user.login.url=http://localhost:8088/user?username={username}&password={password}

# 验证用户名密码的sql脚本
# 支持的列为：userId, username, password, scope，如果DB中的列表名不一致时，请使用as重命名，如：id as userId
# 查询参数为：#{username}和{password}，但Properties中“#”号为特殊字符，程序中会自动给“{”前添加“#”号，因此只需要输入{username}即可
user.login.sql=select id as userId,username, password from user where username={username} and password={password}